---
# Ansible Tasks for Cowrie SSH/Telnet Honeypot
##############################################

# Available tags:
# - debug
# - never
# - always
# - update
# - root      -- this tags require sudo access
# - docker    -- for use with docker

# Prepare Operating System
# These tasks need to be executed as root
##############################################

- name: apt-get update
  apt: update_cache=yes
  tags: [update, root, never]
  when: ansible_facts['os_family'] == 'Debian'

- name: yum update
  yum: update_cache=yes
  tags: [update, root, never]
  when: ansible_facts['os_family'] == 'RedHat'

- name: dnf update
  dnf: update_cache=yes
  tags: [update, root, never]
  when: ansible_facts['os_family'] == 'Fedora'

# TODO: Use independent method ??
# - name: Install prerequisites packages
#   package:
#     name: git
#     state: present

#  'default-libmysqlclient-dev', -> on Debian
#  'libmysqlclient-dev', -> on ubuntu etc

# Debian OS Python2

- name: Ensure Debian os dependencies
  become: true
  tags: [packages, root]
  apt:
    name: ['git-core', 'libffi-dev', 'libssl-dev',
           'libxml2-dev', 'libxslt1-dev', 'openssl', 'python-pip',
           'python-setuptools', 'python-dev', 'build-essential', 'virtualenv']
    state: present
    install_recommends: false
  when: ansible_facts['distribution'] == 'Debian' and python_version == 2

# Debian OS Python3

- name: Ensure Debian os dependencies
  become: true
  tags: [packages, root]
  apt:
    name: ['python3-pip', 'libssl-dev', 'libffi-dev', 'python3-dev',
           'python3-venv', 'python3', 'gcc', 'git', 'build-essential',
           'python3-virtualenv', 'libsnappy-dev',
           'default-libmysqlclient-dev']
    state: present
    install_recommends: false
  when: ansible_facts['distribution'] == 'Debian' and python_version == 3

# Ubuntu Python 2

- name: Ensure Ubuntu os dependencies
  become: true
  tags: [packages, root]
  apt:
    name: ['git-core', 'libffi-dev', 'libssl-dev', 'python-virtualenv',
           'libxml2-dev', 'libxslt1-dev', 'openssl', 'python-pip',
           'python-setuptools', 'python-dev', 'build-essential']
    state: present
    install_recommends: false
  when: ansible_facts['distribution'] == 'Ubuntu' and python_version == 2

# Ubuntu Python 3

- name: Ensure ubuntu os dependencies
  become: true
  tags: [packages, root]
  apt:
    name: ['python3-pip', 'libssl-dev', 'libffi-dev', 'python3-dev',
           'python3-venv', 'python3', 'gcc', 'git', 'build-essential',
           'python3-virtualenv', 'libsnappy-dev',
           'default-libmysqlclient-dev']
    state: present
    install_recommends: false
  when: ansible_facts['distribution'] == 'Ubuntu' and python_version == 3

# Amazonlinux Python 2

- name: Ensure Amazonlinux os dependencies
  become: true
  tags: [packages, root]
  yum:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel', 'shadow-utils']
    state: present
  when: ansible_facts['distribution'] == 'Amazon' and python_version == 2

# Amazonlinux Python 3

- name: Ensure Amazonlinux os dependencies
  become: true
  tags: [packages, root]
  yum:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel', 'shadow-utils']
    state: present
  when: ansible_facts['distribution'] == 'Amazon' and python_version == 3

# Redhat Python 2

- name: Ensure redhat os dependencies
  become: true
  tags: [packages, root]
  yum:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel']
    state: present
  when: ansible_facts['distribution'] == 'RedHat' and python_version == 2

# Redhat Python 3

- name: Ensure redhat os dependencies
  become: true
  tags: [packages, root]
  yum:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel']
    state: present
  when: ansible_facts['distribution'] == 'RedHat' and python_version == 3

# CentOS Python 2

- name: Ensure centos os dependencies
  become: true
  tags: [packages, root]
  yum:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel']
    state: present
  when: ansible_facts['distribution'] == 'CentOS' and python_version == 2

# CentOS Python 3

- name: Ensure centos os dependencies
  become: true
  tags: [packages, root]
  yum:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel']
    state: present
  when: ansible_facts['distribution'] == 'CentOS' and python_version == 3

# Fedora Python 2

- name: Ensure fedora os dependencies
  become: true
  tags: [packages, root]
  dnf:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel']
    state: present
  when: ansible_facts['distribution'] == 'Fedora' and python_version == 2

# Fedora Python 3

- name: Ensure fedora os dependencies
  become: true
  tags: [packages, root]
  dnf:
    name: ['git', 'python-virtualenv', '@Development tools', 'libffi',
           'libffi-devel', 'openssl-devel']
    state: present
  when: ansible_facts['distribution'] == 'Fedora' and python_version == 3

# TODO: Probably don't need this at the OS level

# - name: PIP Install Packages
#   become: true
#   tags: [packages, update]
#   pip:
#     - name: virtualenv
#     - state: present

- name: Ensure Cowrie user
  become: true
  tags: [user, root]
  user:
    name: "{{ cowrie_user }}"
    home: "{{ cowrie_home }}"
    comment: "Used to run Cowrie SSH/Telnet Honeypot"
    state: present
    password: "!"

- name: Ensure Cowrie group
  become: true
  tags: [user, root]
  group:
    name: "{{ cowrie_group }}"
    state: present
